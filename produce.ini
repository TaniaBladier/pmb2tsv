[]
default = %{'pmb-3.0.0-en-train-{}.tsv'.format(status) for status in ('gold', 'silver', 'bronze')} %{'pmb-3.0.0-{}-{}-gold.tsv'.format(lang, portion) for lang in ('en', 'de', 'it', 'nl') for portion in ('dev', 'test')}

### DATA EXTRACTION ############################################################

# Extract data from the PMB, separated into train/dev/test data as explained in
# the README file of the PMB. For dev and test, only gold data is used. For
# train data, bronze and silver files are also created in case one wants to use
# them.

[pmb-3.0.0-en-train-%{status}.parse.tags]
cond = %{status in ('gold', 'silver', 'bronze')}
dep.cac_renumber = cac_renumber.py
recipe =
	set -e
	set -o pipefail
	find pmb-3.0.0-dx000/data/%{status} -maxdepth 1 -regex '.*p[0-9][2-9]' | parallel find {} -name en.parse.tags | sort | parallel tail +6 | python3 %{cac_renumber} > %{target}

[pmb-3.0.0-en-dev-gold.parse.tags]
dep.cac_renumber = cac_renumber.py
recipe =
	set -e
	set -o pipefail
	find pmb-3.0.0-dx000/data/gold -maxdepth 1 -regex '.*p[0-3]0' | parallel find {} -name en.parse.tags | sort | parallel tail +6 | python3 %{cac_renumber} > %{target}

[pmb-3.0.0-en-test-gold.parse.tags]
dep.cac_renumber = cac_renumber.py
recipe =
	set -e
	set -o pipefail
	find pmb-3.0.0-dx000/data/gold -maxdepth 1 -regex '.*p[0-9]1' | parallel find {} -name en.parse.tags | sort | parallel tail +6 | python3 %{cac_renumber} > %{target}

[pmb-3.0.0-%{lang}-dev-%{status}.parse.tags]
cond = %{lang in ('de', 'it', 'nl') and status in ('gold', 'silver', 'bronze')}
dep.cac_renumber = cac_renumber.py
recipe =
	set -e
	set -o pipefail
	find pmb-3.0.0-dx000/data/gold -maxdepth 1 -regex '.*p[0-9][13579]' | parallel find {} -name en.parse.tags | sort | parallel tail +6 | python3 %{cac_renumber} > %{target}

[pmb-3.0.0-%{lang}-test-%{status}.parse.tags]
cond = %{lang in ('de', 'it', 'nl') and status in ('gold', 'silver', 'bronze')}
dep.cac_renumber = cac_renumber.py
recipe =
	set -e
	set -o pipefail
	find pmb-3.0.0-dx000/data/gold -maxdepth 1 -regex '.*p[0-9][02468]' | parallel find {} -name en.parse.tags | sort | parallel tail +6 | python3 %{cac_renumber} > %{target}

### TOKEN NUMBERS ##############################################################

[%{name}.toknum]
dep.parse = %{name}.parse.tags
dep.parse2toknum = parse2toknum.py
deps = cac.py
recipe = python3 %{parse2toknum} < %{parse} > %{target}

### TOKENS ####################################################################

[%{name}.token]
dep.parse = %{name}.parse.tags
dep.parse2token = parse2token.py
deps = cac.py
recipe = python3 %{parse2token} < %{parse} > %{target}

### SEMTAGS ###################################################################

[%{name}.sem]
dep.parse = %{name}.parse.tags
dep.parse2sem = parse2sem.py
deps = cac.py
recipe = python3 %{parse2sem} < %{parse} > %{target}

### LEMMAS ####################################################################

[%{name}.lemma]
dep.parse = %{name}.parse.tags
dep.parse2lemma = parse2lemma.py
deps = cac.py
recipe = python3 %{parse2lemma} < %{parse} > %{target}

### WORDNET SENSES ############################################################

[%{name}.wordnet]
dep.parse = %{name}.parse.tags
dep.parse2wordnet = parse2wordnet.py
deps = cac.py
recipe = python3 %{parse2wordnet} < %{parse} > %{target}

### DEPENDENCIES ##############################################################

[%{name}.dep]
dep.parse = %{name}.parse.tags
dep.parse2dep = parse2dep.pl
deps = cac.pl cat.pl slashes.pl util.pl anno.pl
recipe = swipl -l %{parse2dep} -g main %{parse} > %{target}

### SUPERTAGS #################################################################

[%{name}.super]
dep.parse = %{name}.parse.tags
dep.parse2super = parse2super.py
deps = cac.py
recipe = python3 %{parse2super} < %{parse} > %{target}

### CONSTITUENTS ##############################################################

[%{name}.const]
dep.parse = %{name}.parse.tags
dep.parse2const = parse2const.py
deps = cac.py
recipe = python3 %{parse2const} < %{parse} > %{target}

### TSV OUTPUT ################################################################

# Where it all comes together.

[%{name}.tsv]
dep.toknum = %{name}.toknum
dep.token = %{name}.token
dep.sem = %{name}.sem
dep.lemma = %{name}.lemma
dep.wordnet = %{name}.wordnet
dep.dep = %{name}.dep
dep.super = %{name}.super
dep.const = %{name}.const
dep.blockpaste = blockpaste.py
deps = util.py
recipe =
	set -e
	set -o pipefail
	python3	%{blockpaste} %{toknum} %{token} %{sem} %{lemma} %{wordnet} %{dep} %{super} %{const} | perl -ane 'print "$F[0]\t$F[1]\t$F[2]\t$F[3]\t$F[4]\t$F[5]\t$F[7]\t$F[8]\t$F[6]\n"' > %{target}
