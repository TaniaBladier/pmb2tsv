[]
prelude =
	import re

### DATA EXTRACTION ############################################################

# Extract data from the PMB, one fail per language, part, and annotation status.

[pmb-3.0.0-%{lang}-%{status}-%{part}.parse.tags]
cond = %{lang in ('en', 'de', 'it', 'nl') and re.match(r'p\d\d', part) and status in ('bronze', 'silver', 'gold')}
dep.cac_renumber = cac_renumber.py
recipe =
	set -e
	set -o pipefail
	find pmb-3.0.0/data/%{lang}/%{status} -maxdepth 1 -name %{part} | parallel find {} -name %{lang}.parse.tags | sort | parallel tail +6 | python3 %{cac_renumber} > %{target}

### TOKEN NUMBERS ##############################################################

[%{name}.toknum]
dep.parse = %{name}.parse.tags
dep.parse2toknum = parse2toknum.py
deps = cac.py
recipe = python3 %{parse2toknum} < %{parse} > %{target}

### TOKENS ####################################################################

[%{name}.token]
dep.parse = %{name}.parse.tags
dep.parse2token = parse2token.py
deps = cac.py
recipe = python3 %{parse2token} < %{parse} > %{target}

### SEMTAGS ###################################################################

[%{name}.sem]
dep.parse = %{name}.parse.tags
dep.parse2sem = parse2sem.py
deps = cac.py
recipe = python3 %{parse2sem} < %{parse} > %{target}

### LEMMAS ####################################################################

[%{name}.lemma]
dep.parse = %{name}.parse.tags
dep.parse2lemma = parse2lemma.py
deps = cac.py
recipe = python3 %{parse2lemma} < %{parse} > %{target}

### WORDNET SENSES ############################################################

[%{name}.wordnet]
dep.parse = %{name}.parse.tags
dep.parse2wordnet = parse2wordnet.py
deps = cac.py
recipe = python3 %{parse2wordnet} < %{parse} > %{target}

### VERBNET SENSES ############################################################

[%{name}.verbnet]
dep.parse = %{name}.parse.tags
dep.parse2verbnet = parse2verbnet.py
deps = cac.py
recipe = python3 %{parse2verbnet} < %{parse} > %{target}

### DEPENDENCIES ##############################################################

[%{name}.uddep]
dep.parse = %{name}.parse.tags
dep.parse2dep = parse2dep.pl
deps = cac.pl cat.pl slashes.pl util.pl anno.pl
recipe = swipl -l %{parse2dep} -g main -- %{parse} > %{target}

[%{name}.pmbdep]
dep.parse = %{name}.parse.tags
dep.parse2dep = parse2dep.pl
deps = cac.pl cat.pl slashes.pl util.pl anno.pl
recipe = swipl -l %{parse2dep} -g main -- --no-copula --no-adjective --quasi-auxiliary %{parse} > %{target}

### SUPERTAGS #################################################################

[%{name}.super]
dep.parse = %{name}.parse.tags
dep.parse2super = parse2super.py
deps = cac.py
recipe = python3 %{parse2super} < %{parse} > %{target}

### CONSTITUENTS ##############################################################

[%{name}.const]
dep.parse = %{name}.parse.tags
dep.parse2const = parse2const.py
deps = cac.py
recipe = python3 %{parse2const} < %{parse} > %{target}

### TSV OUTPUT ################################################################

# Where it all comes together.

[%{name}.tsv]
dep.toknum = %{name}.toknum
dep.token = %{name}.token
dep.sem = %{name}.sem
dep.lemma = %{name}.lemma
dep.wordnet = %{name}.wordnet
dep.dep = %{name}.pmbdep
dep.super = %{name}.super
dep.const = %{name}.const
dep.blockpaste = blockpaste.py
dep.spread_roles = spread_roles.py
deps = util.py
recipe =
	set -e
	set -o pipefail
	python3 %{blockpaste} %{toknum} %{token} %{sem} %{lemma} %{dep} %{super} %{const} %{wordnet} | python3 %{spread_roles} > %{target}

# Variant for annotating, with different columns

[%{name}.ann]
dep.toknum = %{name}.toknum
dep.token = %{name}.token
dep.wordnet = %{name}.wordnet
dep.verbnet = %{name}.verbnet
dep.blockpaste = blockpaste.py
dep.spread_roles = spread_roles.py
deps = util.py
recipe =
	set -e
	set -o pipefail
	python3 %{blockpaste} %{toknum} %{token} %{wordnet} %{verbnet} > %{target}

### UNIVERSAL DEPENDENCY EVALUATION ############################################

[%{name}.predicted]
dep.blockpaste = blockpaste.py
dep.toknum = %{name}.toknum
dep.token = %{name}.token
dep.uddep = %{name}.uddep
dep.fix_punct = fix_punct.py
deps = util.py
recipe =
	set -e
	set -o pipefail
	python3 %{blockpaste} %{toknum} %{token} %{uddep} | python3 %{fix_punct} > %{target}

[%{name}.eval]
dep.annotated = %{name}.annotated
dep.predicted = %{name}.predicted
dep.eval = eval.py
recipe = python3 %{eval} %{annotated} %{predicted} > %{target}
